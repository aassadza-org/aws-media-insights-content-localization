---
AWSTemplateFormatVersion: '2010-09-09'

Description: Deploys the AWS Video Transcriber Application

Mappings:

  SourceCode:
    General:
      S3Bucket: "%%BUCKET_NAME%%"
      CodeKeyPrefix: "media-insights-solution/%%VERSION%%/code"
      TemplateKeyPrefix: "media-insights-solution/%%VERSION%%/cf"
      WebsitePrefix: "media-insights-solution/%%VERSION%%/code/website"

Parameters:

# Application parameters
  TranscribeLanguage:
    Type: String
    AllowedValues:
      - en-AU
      - en-US
      - en-GB
      - es-US
      - de-DE
      - pt-BR
      - fr-CA
      - fr-FR
      - it-IT
    Default: en-US
    Description: The language that Transcribe uses

  APIKey:
    Type: String
    AllowedPattern: "[a-zA-Z0-9]{20,70}"
    ConstraintDescription: 'must only contain letters (uppercase and lowercase) and
      numbers min length: 20 max length: 70'
    Default: TranscribeApiKeyTranscribeApiKey
    Description: An API key used to access the website

# MIE parameters
  ControlPlaneApiEndpoint:
    Type: "String"
    Description: "Base endpoint url of the controlplane"

  DataPlaneApiEndpoint:
    Type: "String"
    Description: "Base endpoint url of the dataplane"

  DataPlaneBucket:
    Type: "String"
    Description: "Bucket for the dataplane"

Resources:

# Log groups
  GetVideoLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/aws/lambda/prod-aws-captions-getvideo"
      RetentionInDays: 7

  DeleteVideoLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/aws/lambda/prod-aws-captions-deletevideo"
      RetentionInDays: 7

  GetUploadLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/aws/lambda/prod-aws-captions-getupload"
      RetentionInDays: 7

  DeleteCaptionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/aws/lambda/prod-aws-captions-deletecaption"
      RetentionInDays: 7

  GetVocabularyLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/aws/lambda/prod-aws-captions-getvocabulary"
      RetentionInDays: 7

  HeadVocabularyLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/aws/lambda/prod-aws-captions-headvocabulary"
      RetentionInDays: 7

  PutVocabularyLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/aws/lambda/prod-aws-captions-putvocabulary"
      RetentionInDays: 7

  GetTweaksLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/aws/lambda/prod-aws-captions-gettweaks"
      RetentionInDays: 7

  PutTweaksLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/aws/lambda/prod-aws-captions-puttweaks"
      RetentionInDays: 7

  BootStrapLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/aws/lambda/prod-aws-captions-bootstrap"
      RetentionInDays: 7

  CustomResourceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/aws/lambda/prod-aws-captions-customresource"
      RetentionInDays: 7

# Lambda functions
  GetVideoLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key:
          !Join [
            "/",
            [
            !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
            "transcriberapp.zip",
            ],
          ]
      FunctionName: prod-aws-captions-getvideo
      Handler: getvideo.handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Runtime: nodejs12.x
      Timeout: 29
      Description: Loads a video and captions from MIE Dataplane
      Environment:
        Variables:
          REGION:
            Ref: AWS::Region
          VIDEO_BUCKET:
            Ref: DataPlaneBucket
          DYNAMO_CONFIG_TABLE:
            Ref: ConfigDynamoDBTable
    DependsOn:
      - GetVideoLogGroup
      - LambdaRole

  DeleteVideoLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key:
          !Join [
            "/",
            [
            !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
            "transcriberapp.zip",
            ],
          ]
      FunctionName: prod-aws-captions-deletevideo
      Handler: deletevideo.handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Runtime: nodejs12.x
      Timeout: 29
      Description: Removes a video from the system
      Environment:
        Variables:
          REGION:
            Ref: AWS::Region
          VIDEO_BUCKET:
            Ref: DataPlaneBucket
      Layers:
        - Ref: LambdaLayer
    DependsOn:
      - DeleteVideoLogGroup
      - LambdaRole

  GetUploadLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key:
          !Join [
            "/",
            [
            !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
            "transcriberapp.zip",
            ],
          ]
      FunctionName: prod-aws-captions-getupload
      Handler: getupload.handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Runtime: nodejs12.x
      Timeout: 29
      Description: Fetches a signed URL for uploading video into S3
      Environment:
        Variables:
          REGION:
            Ref: AWS::Region
          VIDEO_BUCKET:
            Ref: DataPlaneBucket
    DependsOn:
      - GetUploadLogGroup
      - LambdaRole

  DeleteCaptionLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key:
          !Join [
            "/",
            [
            !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
            "transcriberapp.zip",
            ],
          ]
      FunctionName: prod-aws-captions-deletecaption
      Handler: deletecaption.handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Runtime: nodejs12.x
      Timeout: 29
      Description: Saves captions to MIE Dataplane
      Environment:
        Variables:
          REGION:
            Ref: AWS::Region
          CAPTION_BUCKET:
            Ref: DataPlaneBucket
    DependsOn:
      - DeleteCaptionLogGroup
      - LambdaRole

  GetVocabularyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key:
          !Join [
            "/",
            [
            !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
            "transcriberapp.zip",
            ],
          ]
      FunctionName: prod-aws-captions-getvocabulary
      Handler: getvocabulary.handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Runtime: nodejs12.x
      Timeout: 29
      Description: Loads vocabulary from Transcribe
      Environment:
        Variables:
          REGION:
            Ref: AWS::Region
          VOCABULARY_NAME:
            Fn::Join:
              - ''
              - - prod-aws-captions-
                - Ref: TranscribeLanguage
    DependsOn:
      - GetVocabularyLogGroup
      - LambdaRole

  HeadVocabularyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key:
          !Join [
            "/",
            [
            !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
            "transcriberapp.zip",
            ],
          ]
      FunctionName: prod-aws-captions-headvocabulary
      Handler: headvocabulary.handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Runtime: nodejs12.x
      Timeout: 29
      Description: Checks if vocabulary is ready to save
      Environment:
        Variables:
          REGION:
            Ref: AWS::Region
          VOCABULARY_NAME:
            Fn::Join:
              - ''
              - - prod-aws-captions-
                - Ref: TranscribeLanguage
    DependsOn:
      - HeadVocabularyLogGroup
      - LambdaRole

  PutVocabularyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key:
          !Join [
            "/",
            [
            !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
            "transcriberapp.zip",
            ],
          ]
      FunctionName: prod-aws-captions-putvocabulary
      Handler: putvocabulary.handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Runtime: nodejs12.x
      Timeout: 29
      Description: Updates Transcribe custom vocabulary
      Environment:
        Variables:
          REGION:
            Ref: AWS::Region
          VOCABULARY_NAME:
            Fn::Join:
              - ''
              - - prod-aws-captions-
                - Ref: TranscribeLanguage
          TRANSCRIBE_LANGUAGE:
            Ref: TranscribeLanguage
    DependsOn:
      - PutVocabularyLogGroup
      - LambdaRole

  GetTweaksLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key:
          !Join [
            "/",
            [
            !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
            "transcriberapp.zip",
            ],
          ]
      FunctionName: prod-aws-captions-gettweaks
      Handler: gettweaks.handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Runtime: nodejs12.x
      Timeout: 29
      Description: Loads tweaks from DynamoDB
      Environment:
        Variables:
          DYNAMO_CONFIG_TABLE:
            Ref: ConfigDynamoDBTable
          REGION:
            Ref: AWS::Region
    DependsOn:
      - GetTweaksLogGroup
      - LambdaRole

  PutTweaksLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key:
          !Join [
            "/",
            [
            !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
            "transcriberapp.zip",
            ],
          ]
      FunctionName: prod-aws-captions-puttweaks
      Handler: puttweaks.handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Runtime: nodejs12.x
      Timeout: 29
      Description: Saves tweaks to DynamoDB
      Environment:
        Variables:
          DYNAMO_CONFIG_TABLE:
            Ref: ConfigDynamoDBTable
          REGION:
            Ref: AWS::Region
    DependsOn:
      - PutTweaksLogGroup
      - LambdaRole

  BootStrapLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key:
          !Join [
            "/",
            [
            !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
            "transcriberapp.zip",
            ],
          ]
      FunctionName: prod-aws-captions-bootstrap
      Handler: bootstrap.handler
      MemorySize: 2048
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Runtime: nodejs12.x
      Timeout: 900
      Description: Bootstraps videos to process into S3
      Environment:
        Variables:
          OUTPUT_BUCKET:
            Fn::Join:
              - ''
              - - prod-aws-captions-video-
                - Ref: AWS::Region
                - "-"
                - Ref: AWS::AccountId
          REGION:
            Ref: AWS::Region
    DependsOn:
      - BootStrapLogGroup
      - LambdaRole

  CustomResourceLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key:
          !Join [
            "/",
            [
            !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
            "transcriberapp.zip",
            ],
          ]
      FunctionName: prod-aws-captions-customresource
      Handler: customresource.handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Runtime: nodejs12.x
      Timeout: 600
      Description: Performs custom cloudformation initialization
      Layers:
          - Ref: LambdaLayer
    DependsOn:
      - CustomResourceLogGroup
      - LambdaRole

# Api Gateway Routes
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: prod-aws-captions
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiGatewayResourceVideos:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
      PathPart: videos
      RestApiId:
        Ref: ApiGatewayRestApi

  ApiGatewayResourceVideo:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
      PathPart: video
      RestApiId:
        Ref: ApiGatewayRestApi

  ApiGatewayResourceVideoNameVar:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: ApiGatewayResourceVideo
      PathPart: "{videoName}"
      RestApiId:
        Ref: ApiGatewayRestApi

  ApiGatewayResourceUpload:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
      PathPart: upload
      RestApiId:
        Ref: ApiGatewayRestApi

  ApiGatewayResourceUploadUploadfileVar:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: ApiGatewayResourceUpload
      PathPart: "{uploadFile}"
      RestApiId:
        Ref: ApiGatewayRestApi

  ApiGatewayResourceCaption:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
      PathPart: caption
      RestApiId:
        Ref: ApiGatewayRestApi

  ApiGatewayResourceCaptionAssetIdVar:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: ApiGatewayResourceCaption
      PathPart: "{assetId}"
      RestApiId:
        Ref: ApiGatewayRestApi

  ApiGatewayResourceCaptionWorkflowIdVar:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: ApiGatewayResourceCaptionAssetIdVar
      PathPart: "{workflowId}"
      RestApiId:
        Ref: ApiGatewayRestApi

  ApiGatewayResourceVocabulary:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
      PathPart: vocabulary
      RestApiId:
        Ref: ApiGatewayRestApi

  ApiGatewayResourceTweaks:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
      PathPart: tweaks
      RestApiId:
        Ref: ApiGatewayRestApi

# API Gateway Methods
  ApiGatewayMethodVideosOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Credentials: "'false'"
            ResponseTemplates:
              application/json: ''
      ResourceId:
        Ref: ApiGatewayResourceVideos
      RestApiId:
        Ref: ApiGatewayRestApi

  ApiGatewayMethodVideoNameVarOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE,GET'"
              method.response.header.Access-Control-Allow-Credentials: "'false'"
            ResponseTemplates:
              application/json: ''
      ResourceId:
        Ref: ApiGatewayResourceVideoNameVar
      RestApiId:
        Ref: ApiGatewayRestApi

  ApiGatewayMethodUploadUploadfileVarOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Credentials: "'false'"
            ResponseTemplates:
              application/json: ''
      ResourceId:
        Ref: ApiGatewayResourceUploadUploadfileVar
      RestApiId:
        Ref: ApiGatewayRestApi

  ApiGatewayMethodCaptionWorkflowIdVarOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE'"
              method.response.header.Access-Control-Allow-Credentials: "'false'"
            ResponseTemplates:
              application/json: ''
      ResourceId:
        Ref: ApiGatewayResourceCaptionWorkflowIdVar
      RestApiId:
        Ref: ApiGatewayRestApi

  ApiGatewayMethodVocabularyOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT,HEAD,GET'"
              method.response.header.Access-Control-Allow-Credentials: "'false'"
            ResponseTemplates:
              application/json: ''
      ResourceId:
        Ref: ApiGatewayResourceVocabulary
      RestApiId:
        Ref: ApiGatewayRestApi

  ApiGatewayMethodTweaksOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{statusCode:200}"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT,GET'"
              method.response.header.Access-Control-Allow-Credentials: "'false'"
            ResponseTemplates:
              application/json: ''
      ResourceId:
        Ref: ApiGatewayResourceTweaks
      RestApiId:
        Ref: ApiGatewayRestApi

  ApiGatewayMethodVideoNameVarGet:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId:
        Ref: ApiGatewayResourceVideoNameVar
      RestApiId:
        Ref: ApiGatewayRestApi
      ApiKeyRequired: true
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ''
            - - 'arn:'
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::GetAtt:
                  - GetVideoLambdaFunction
                  - Arn
              - "/invocations"
      MethodResponses: []

  ApiGatewayMethodVideoNameVarDelete:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: DELETE
      RequestParameters: {}
      ResourceId:
        Ref: ApiGatewayResourceVideoNameVar
      RestApiId:
        Ref: ApiGatewayRestApi
      ApiKeyRequired: true
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ''
            - - 'arn:'
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::GetAtt:
                  - DeleteVideoLambdaFunction
                  - Arn
              - "/invocations"
      MethodResponses: []

  ApiGatewayMethodUploadUploadfileVarGet:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId:
        Ref: ApiGatewayResourceUploadUploadfileVar
      RestApiId:
        Ref: ApiGatewayRestApi
      ApiKeyRequired: true
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ''
            - - 'arn:'
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::GetAtt:
                  - GetUploadLambdaFunction
                  - Arn
              - "/invocations"
      MethodResponses: []

  ApiGatewayMethodCaptionWorkflowIdVarDelete:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: DELETE
      RequestParameters: {}
      ResourceId:
        Ref: ApiGatewayResourceCaptionWorkflowIdVar
      RestApiId:
        Ref: ApiGatewayRestApi
      ApiKeyRequired: true
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ''
            - - 'arn:'
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::GetAtt:
                  - DeleteCaptionLambdaFunction
                  - Arn
              - "/invocations"
      MethodResponses: []

  ApiGatewayMethodVocabularyGet:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId:
        Ref: ApiGatewayResourceVocabulary
      RestApiId:
        Ref: ApiGatewayRestApi
      ApiKeyRequired: true
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ''
            - - 'arn:'
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::GetAtt:
                  - GetVocabularyLambdaFunction
                  - Arn
              - "/invocations"
      MethodResponses: []

  ApiGatewayMethodVocabularyHead:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: HEAD
      RequestParameters: {}
      ResourceId:
        Ref: ApiGatewayResourceVocabulary
      RestApiId:
        Ref: ApiGatewayRestApi
      ApiKeyRequired: true
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ''
            - - 'arn:'
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::GetAtt:
                  - HeadVocabularyLambdaFunction
                  - Arn
              - "/invocations"
      MethodResponses: []

  ApiGatewayMethodVocabularyPut:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: PUT
      RequestParameters: {}
      ResourceId:
        Ref: ApiGatewayResourceVocabulary
      RestApiId:
        Ref: ApiGatewayRestApi
      ApiKeyRequired: true
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ''
            - - 'arn:'
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::GetAtt:
                  - PutVocabularyLambdaFunction
                  - Arn
              - "/invocations"
      MethodResponses: []

  ApiGatewayMethodTweaksGet:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId:
        Ref: ApiGatewayResourceTweaks
      RestApiId:
        Ref: ApiGatewayRestApi
      ApiKeyRequired: true
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ''
            - - 'arn:'
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::GetAtt:
                  - GetTweaksLambdaFunction
                  - Arn
              - "/invocations"
      MethodResponses: []

  ApiGatewayMethodTweaksPut:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: PUT
      RequestParameters: {}
      ResourceId:
        Ref: ApiGatewayResourceTweaks
      RestApiId:
        Ref: ApiGatewayRestApi
      ApiKeyRequired: true
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ''
            - - 'arn:'
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::GetAtt:
                  - PutTweaksLambdaFunction
                  - Arn
              - "/invocations"
      MethodResponses: []

  ApiGatewayDeployment1550140467913:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: ApiGatewayRestApi
      StageName: prod
    DependsOn:
      - ApiGatewayMethodVideosOptions
      - ApiGatewayMethodVideoNameVarOptions
      - ApiGatewayMethodUploadUploadfileVarOptions
      - ApiGatewayMethodCaptionWorkflowIdVarOptions
      - ApiGatewayMethodVocabularyOptions
      - ApiGatewayMethodTweaksOptions
      - ApiGatewayMethodVideoNameVarGet
      - ApiGatewayMethodVideoNameVarDelete
      - ApiGatewayMethodUploadUploadfileVarGet
      - ApiGatewayMethodCaptionWorkflowIdVarDelete
      - ApiGatewayMethodVocabularyGet
      - ApiGatewayMethodVocabularyHead
      - ApiGatewayMethodVocabularyPut
      - ApiGatewayMethodTweaksGet
      - ApiGatewayMethodTweaksPut

# Api Gateway Permissions
  GetVideoLambdaPermissionApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
          - GetVideoLambdaFunction
          - Arn
      Action: lambda:InvokeFunction
      Principal:
        Fn::Join:
          - ''
          - - apigateway.
            - Ref: AWS::URLSuffix
      SourceArn:
        Fn::Join:
          - ''
          - - 'arn:'
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ApiGatewayRestApi
            - "/*/*"

  DeleteVideoLambdaPermissionApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
          - DeleteVideoLambdaFunction
          - Arn
      Action: lambda:InvokeFunction
      Principal:
        Fn::Join:
          - ''
          - - apigateway.
            - Ref: AWS::URLSuffix
      SourceArn:
        Fn::Join:
          - ''
          - - 'arn:'
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ApiGatewayRestApi
            - "/*/*"

  GetUploadLambdaPermissionApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
          - GetUploadLambdaFunction
          - Arn
      Action: lambda:InvokeFunction
      Principal:
        Fn::Join:
          - ''
          - - apigateway.
            - Ref: AWS::URLSuffix
      SourceArn:
        Fn::Join:
          - ''
          - - 'arn:'
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ApiGatewayRestApi
            - "/*/*"

  DeleteCaptionLambdaPermissionApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
          - DeleteCaptionLambdaFunction
          - Arn
      Action: lambda:InvokeFunction
      Principal:
        Fn::Join:
          - ''
          - - apigateway.
            - Ref: AWS::URLSuffix
      SourceArn:
        Fn::Join:
          - ''
          - - 'arn:'
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ApiGatewayRestApi
            - "/*/*"

  GetVocabularyLambdaPermissionApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
          - GetVocabularyLambdaFunction
          - Arn
      Action: lambda:InvokeFunction
      Principal:
        Fn::Join:
          - ''
          - - apigateway.
            - Ref: AWS::URLSuffix
      SourceArn:
        Fn::Join:
          - ''
          - - 'arn:'
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ApiGatewayRestApi
            - "/*/*"

  HeadVocabularyLambdaPermissionApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
          - HeadVocabularyLambdaFunction
          - Arn
      Action: lambda:InvokeFunction
      Principal:
        Fn::Join:
          - ''
          - - apigateway.
            - Ref: AWS::URLSuffix
      SourceArn:
        Fn::Join:
          - ''
          - - 'arn:'
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ApiGatewayRestApi
            - "/*/*"

  PutVocabularyLambdaPermissionApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
          - PutVocabularyLambdaFunction
          - Arn
      Action: lambda:InvokeFunction
      Principal:
        Fn::Join:
          - ''
          - - apigateway.
            - Ref: AWS::URLSuffix
      SourceArn:
        Fn::Join:
          - ''
          - - 'arn:'
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ApiGatewayRestApi
            - "/*/*"

  GetTweaksLambdaPermissionApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
          - GetTweaksLambdaFunction
          - Arn
      Action: lambda:InvokeFunction
      Principal:
        Fn::Join:
          - ''
          - - apigateway.
            - Ref: AWS::URLSuffix
      SourceArn:
        Fn::Join:
          - ''
          - - 'arn:'
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ApiGatewayRestApi
            - "/*/*"

  PutTweaksLambdaPermissionApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
          - PutTweaksLambdaFunction
          - Arn
      Action: lambda:InvokeFunction
      Principal:
        Fn::Join:
          - ''
          - - apigateway.
            - Ref: AWS::URLSuffix
      SourceArn:
        Fn::Join:
          - ''
          - - 'arn:'
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ApiGatewayRestApi
            - "/*/*"

  LambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - nodejs12.x
      Content:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key:
          !Join [
            "/",
            [
            !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
            "transcriber-lambda-layer.zip",
            ],
          ]
      Description: Recent Node.js 8.10 AWS Node SDK
      LayerName: prod-aws-captions-node-sdk-layer
      LicenseInfo: Apache-2.0

  LambdaLayerPermission:
    Type: AWS::Lambda::LayerVersionPermission
    Properties:
      Action: lambda:GetLayerVersion
      LayerVersionArn:
        Ref: LambdaLayer
      Principal:
        Ref: AWS::AccountId

# Custom Resource
  MyCustomResource:
    Type: Custom::CustomResource
    Version: '1.0'
    DependsOn:
      - CustomResourceLambdaFunction
    Properties:
      ServiceToken:
        Fn::Join:
          - ":"
          - - arn:aws:lambda
            - Ref: AWS::Region
            - Ref: AWS::AccountId
            - function:prod-aws-captions-customresource
      InputManifest:
        Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        Key:
          !Join [
            "/",
            [
            !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
            "transcriberwebsite/manifest.json",
            ],
          ]
      WebDeploySource:
        Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        Key:
          !Join [
            "/",
            [
            !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
            "transcriberwebsite/",
            ],
          ]
      WebDeployTarget:
        Bucket:
          Ref: PublicBucket
      APIGateway:
        Url:
          Fn::Join:
            - ''
            - - https://
              - Ref: ApiGatewayRestApi
              - ".execute-api."
              - Ref: AWS::Region
              - ".amazonaws.com/"
              - prod
        Id:
          Ref: ApiGatewayRestApi
        Stage: prod
        PlanName: prod-aws-captions-usageplan
        Key:
          Name: prod-aws-captions-apikey
          Value:
            Ref: APIKey
      MIE:
        DataPlane:
          - Ref: DataPlaneApiEndpoint
        ControlPlane:
          - Ref: ControlPlaneApiEndpoint
        DataPlaneBucket:
          - Ref: DataPlaneBucket
      TranscribeLanguage:
        Ref: TranscribeLanguage
      VocabularyName:
        Fn::Join:
          - ''
          - - prod-aws-captions-
            - Ref: TranscribeLanguage

# IAM policy
  LambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName:
        Fn::Join:
          - ''
          - - Ref: AWS::StackName
            - "-prod-aws-captions-lambda-policy"
      Description: Managed policy for lambdas
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - apigateway:*
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - Fn::Join:
                  - ":"
                  - - arn:aws:logs
                    - Ref: AWS::Region
                    - Ref: AWS::AccountId
                    - log-group:/aws/lambda/*:*:*
          - Effect: Allow
            Action:
              - dynamodb:Scan
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
            Resource:
              - Fn::GetAtt:
                  - ConfigDynamoDBTable
                  - Arn
          - Effect: Allow
            Action:
              - transcribe:CreateVocabulary
              - transcribe:UpdateVocabulary
              - transcribe:GetVocabulary
              - transcribe:DeleteVocabulary
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - s3:*
            Resource:
              - Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - Fn::FindInMap: ["SourceCode", "General", "S3Bucket"]
                  - "/*"
              - Fn::Join:
                  - ''
                  - - arn:aws:s3:::prod-aws-captions-public-
                    - Ref: AWS::Region
                    - "-"
                    - Ref: AWS::AccountId
              - Fn::Join:
                  - ''
                  - - arn:aws:s3:::prod-aws-captions-public-
                    - Ref: AWS::Region
                    - "-"
                    - Ref: AWS::AccountId
                    - "/*"
              - Fn::Join:
                  - ''
                  - - 'arn:aws:s3:::'
                    - Ref: DataPlaneBucket
              - Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: DataPlaneBucket
                  - "/*"
          - Effect: Allow
            Action:
              - iam:PassRole
            Resource:
              - Fn::Join:
                  - ''
                  - - 'arn:aws:iam::'
                    - Ref: AWS::AccountId
                    - ":role/"
                    - Ref: AWS::StackName

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 'prod-aws-captions-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Ref: LambdaPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

# S3 bucket to host website files
  PublicBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Join:
          - ''
          - - prod-aws-captions-public-
            - Ref: AWS::Region
            - "-"
            - Ref: AWS::AccountId
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - "*"
            AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
            MaxAge: 3000

# Tweaks table
  ConfigDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: prod-aws-captions-config
      AttributeDefinitions:
        - AttributeName: configId
          AttributeType: S
      KeySchema:
        - AttributeName: configId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

Outputs:

  Website:
    Description: Link to the public website
    Value:
      Fn::Join:
        - ''
        - - https://s3.
          - Ref: AWS::Region
          - ".amazonaws.com/"
          - prod-aws-captions-public-
          - Ref: AWS::Region
          - "-"
          - Ref: AWS::AccountId
          - "/index.html"
    Export:
      Name: prod-aws-captions-website

  APIKey:
    Description: API Key to use when accessing the site
    Value:
      Ref: APIKey
    Export:
      Name: prod-aws-captions-apikey
