name: Push Workflow

# global environment variables to all jobs
env:
  REGION: us-west-2
  SOLUTION_NAME: aws-content-localization
  DIST_OUTPUT_BUCKET: micl-dev
  REGIONS_TO_DEPLOY: "us-west-2"

on:
  workflow_dispatch:
#on:
#  push:
#    paths-ignore:
#      - "docs/**"
#      - "**/*.md"
#      - "**/*.txt"

jobs:
  build-content-localization-dev-us-west-2:
    runs-on: ubuntu-latest
    steps:
      - name: Check out pr branch
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.sha }}

      - name: Initialize AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.BUILD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.BUILD_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Generate short sha
        run: |
          echo "SHORT_SHA=`git rev-parse --short HEAD`" >> $GITHUB_ENV
      - name: Run build script
        run: |
          cd deployment
          CONTENT_LOCALIZATION_STACK_NAME="pr${SHORT_SHA}"
          EMAIL=micontentlocalization@gmail.com
          REGION=us-west-2
          VERSION="pr-${SHORT_SHA}"
          DIST_OUTPUT_BUCKET=micl-dev
          TEMPLATE_OUTPUT_BUCKET=$DIST_OUTPUT_BUCKET-$REGION
          ./build.sh $DIST_OUTPUT_BUCKET-$REGION $VERSION $REGION
          echo "read in the template"
          read -r TEMPLATE < ../src/templateUrlMieRelease.txt
      - name: Store templates for check jobs
        uses: actions/upload-artifact@v2
        with:
          name: cloudformation-templates
          path: deployment/dist/*.template
      - name: Store virtual environment requirements
        uses: actions/upload-artifact@v2
        with:
          name: virtual-environment-requirements
          path: deployment/requirements.txt
      - name: 'Upload One-click Deployment Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: templateUrlMieRelease
          path: src/templateUrlMieRelease.txt
          retention-days: 3
      - name: 'Upload Developer Deployment Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: templateUrlMieDevelopment
          path: src/templateUrlMieDevelopment.txt
          retention-days: 3

  scan-job:
    runs-on: ubuntu-latest
    needs: build-content-localization-dev-us-west-2
    steps:
      - name: Check out repo
        uses: actions/checkout@v2
      # scan for any malware in the commit
      - name: ClamAV Scan
        uses: djdefi/gitavscan@main
        with:
          full: "--full"
      # scan for various types of keys and tokens
      - name: Trufflehog Scan
        uses: edplato/trufflehog-actions-scan@master
        with:
          scanArguments: "--regex --entropy=False"

  cfn-lint-check-job:
    needs: scan-job
    runs-on: ubuntu-latest
    name: Check templates with cfn-lint
    steps:
      - name: Download build templates
        uses: actions/download-artifact@v2
        with:
          name: cloudformation-templates
      - name: Download virtual environment requirements
        uses: actions/download-artifact@v2
        with:
          name: virtual-environment-requirements
      - name: Update system path
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Install required system packages
        run: |
          pip install --upgrade --force-reinstall -r requirements.txt 2> error.txt
          if [ -s error.txt ]; then
            echo "ERROR: System package installation failed."
            cat error.txt
            exit 1
          fi
      - name: Check with cfn-lint
        run: cfn-lint *.template
  
  cfn-nag-check-job:
    needs: scan-job
    runs-on: ubuntu-latest
    name: Check templates with cfn-nag
    steps:
      - name: Download build templates
        uses: actions/download-artifact@v2
        with:
          name: cloudformation-templates
      - name: Check with cfn-nag
        uses: stelligent/cfn_nag@master

  hawkeye-check-job:
    needs: scan-job
    runs-on: ubuntu-latest
    name: Check source code with Hawkeye
    steps:
      # check out the merged PR
      - name: Checkout
        uses: actions/checkout@v2
      # check it with Hawkeye
      - name: Hawkeye Scanner
        uses: ./.github/actions/hawkeye-scan

  pylint-check-job:
    needs: scan-job
    runs-on: ubuntu-latest
    name: Check source code with Pylint
    steps:
      # check out the merged PR
      - name: Checkout
        uses: actions/checkout@v2
      - name: Update system path
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Install required system packages
        run: |
          pip install --upgrade --force-reinstall -r deployment/requirements.txt 2> error.txt
          if [ -s error.txt ]; then
            echo "ERROR: System package installation failed."
            cat error.txt
            exit 1
          fi
      # check it with Pylint
      - name: Check with Pylint
        run: |
          cd source
          ./tools/pylint.sh
  jshint-check-job:
    needs: scan-job
    runs-on: ubuntu-latest
    name: Check source code with JShint
    steps:
      # check out the merged PR
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install JShint
        run: npm install jshint
      - name: Check with JShint
        run: |
          cd source/html
          find . -name '*.js' -type f -print | \
            grep --invert-match "/external/" | \
            xargs ../../node_modules/jshint/bin/jshint
